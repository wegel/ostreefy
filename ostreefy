#!/bin/sh
set -eu

readonly OSTREEFY="ostreefy"
readonly ERROR_MSG_OSTREE_SYS_TREE="ERROR: OSTREE_SYS_TREE is not set or set to /"
readonly ERROR_MSG_NON_OSTREE_ENV="ERROR: Not running in non-OSTree environment."

export OSTREE_SYS_ROOT="${OSTREE_SYS_ROOT:-/}"
export OSTREE_SYS_TREE="${OSTREE_SYS_TREE:-/var/tmp/rootfs}"
export OSTREE_OPTS="${OSTREE_OPTS:-"--retain-rollback"}"
export OSTREE_KARGS="${OSTREE_KARGS:-$(cat "${OSTREE_KARGS_FILE:-kargs.local}" 2>/dev/null || true)}"

export CONTAINER_RUNTIME="${CONTAINER_RUNTIME:-podman}"
export CONTAINER_RUNTIME_OPTS="${CONTAINER_RUNTIME_OPTS:-}"

export OSTREE_BRANCH="${OSTREE_BRANCH:-${OSTREEFY}/latest}"
export OSTREE_OS="${OSTREE_OS:-${OSTREEFY}}"

export OSTREE_SYS_BOOT_LABEL="${OSTREE_SYS_BOOT_LABEL:-SYS_BOOT}"
export OSTREE_SYS_ROOT_LABEL="${OSTREE_SYS_ROOT_LABEL:-SYS_ROOT}"
export OSTREE_SYS_VAR_LABEL="${OSTREE_SYS_VAR_LABEL:-SYS_VAR}"
export OSTREE_DEV_BOOT="${OSTREE_DEV_BOOT:-/dev/disk/by-label/${OSTREE_SYS_BOOT_LABEL}}"
export OSTREE_DEV_ROOT="${OSTREE_DEV_ROOT:-/dev/disk/by-label/${OSTREE_SYS_ROOT_LABEL}}"
export OSTREE_DEV_VAR="${OSTREE_DEV_VAR:-/dev/disk/by-label/${OSTREE_SYS_VAR_LABEL}}"

export SU_TOOL="${SU_TOOL:-sudo}"

is_local() {
	[ -d "/ostree" ]
}

env_verify_local() {
	if ! is_local; then
		echo "$ERROR_MSG_NON_OSTREE_ENV"
		exit 1
	fi
}

create_rootfs_from_container_image() {
	if [ -z "${OSTREE_SYS_TREE}" ] || [ "${OSTREE_SYS_TREE}" = "/" ]; then
		echo "$ERROR_MSG_OSTREE_SYS_TREE"
		exit 1
	fi

	rm -rf "${OSTREE_SYS_TREE}"
	mkdir -p "${OSTREE_SYS_TREE}"
	${CONTAINER_RUNTIME} ${CONTAINER_RUNTIME_OPTS} export $(${CONTAINER_RUNTIME} ${CONTAINER_RUNTIME_OPTS} create "${CONTAINER_IMAGE}" sh) | tar -xC "${OSTREE_SYS_TREE}"

	for script in $(find "${OSTREE_SYS_TREE}/usr/share/ostreefy/post.d" -type f | sort -t- -k1,1n); do
		echo "Running ${script}"
		. "${script}"
	done
}

deploy_ostree_image() {
	${SU_TOOL} ostree commit --repo="${OSTREE_SYS_ROOT}/ostree/repo" --branch="${OSTREE_BRANCH}" --tree=dir="${OSTREE_SYS_TREE}"

	# build kargs from default and user-provided args
	KARGS="--karg=root=LABEL=SYS_ROOT --karg=rw"
	if [ -n "${OSTREE_KARGS}" ]; then
		for karg in ${OSTREE_KARGS}; do
			KARGS="${KARGS} --karg=${karg}"
		done
	fi

	${SU_TOOL} ostree admin deploy --sysroot="${OSTREE_SYS_ROOT}" ${KARGS} \
		--os=${OSTREE_OS} ${OSTREE_OPTS} "${OSTREE_BRANCH}"
}

revert_ostree_image() {
	${SU_TOOL} ostree admin undeploy --sysroot="${OSTREE_SYS_ROOT}" 0
}

disk_create_mounts() {
	${SU_TOOL} mount --mkdir "${OSTREE_DEV_ROOT}" "${OSTREE_SYS_ROOT}"
	${SU_TOOL} mount --mkdir "${OSTREE_DEV_BOOT}" "${OSTREE_SYS_ROOT}/boot/efi"
}

ostree_create_repo() {
	${SU_TOOL} ostree admin init-fs --sysroot="${OSTREE_SYS_ROOT}" --modern "${OSTREE_SYS_ROOT}"
	${SU_TOOL} ostree admin stateroot-init --sysroot="${OSTREE_SYS_ROOT}" "${OSTREE_OS}"
	${SU_TOOL} ostree init --repo="${OSTREE_SYS_ROOT}/ostree/repo" --mode=bare
	${SU_TOOL} ostree config --repo="${OSTREE_SYS_ROOT}/ostree/repo" set sysroot.bootprefix "true"
}

bootloader_create() {
	${SU_TOOL} grub-install --target=x86_64-efi --efi-directory="${OSTREE_SYS_ROOT}/boot/efi" --removable --boot-directory="${OSTREE_SYS_ROOT}/boot/efi/EFI" --bootloader-id="${OSTREE_OS}" "${OSTREE_DEV_BOOT}"

	export OSTREE_SYS_PATH=$(ls -d "${OSTREE_SYS_ROOT}/ostree/deploy/${OSTREE_OS}/deploy/"* | head -n 1)

	rm -rfv "${OSTREE_SYS_PATH}/boot/"*
	${SU_TOOL} mount --mkdir --rbind "${OSTREE_SYS_ROOT}/boot" "${OSTREE_SYS_PATH}/boot"
	${SU_TOOL} mount --mkdir --rbind "${OSTREE_SYS_ROOT}/ostree" "${OSTREE_SYS_PATH}/sysroot/ostree"

	for i in /dev /proc /sys; do mount -o bind "$i" "${OSTREE_SYS_PATH}${i}"; done
	${SU_TOOL} chroot "${OSTREE_SYS_PATH}" /bin/bash -c "grub-mkconfig -o /boot/efi/EFI/grub/grub.cfg"

	${SU_TOOL} umount -R "${OSTREE_SYS_ROOT}"
}

check_programs() {
	for P in "$@"; do
		if ! command -v "${P}" >/dev/null 2>&1; then
			echo "ERROR: Required program '${P}' is not installed."
			exit 1
		fi
	done
}

check_programs ostree ${CONTAINER_RUNTIME} wget which grub-install ${SU_TOOL}

OPERATION=${1:-}
CONTAINER_IMAGE=${2:-}

if [ -z "$CONTAINER_IMAGE" ] && [ "$OPERATION" != "revert" ]; then
	echo "ERROR: Container Image not provided."
	exit 1
fi

case ${OPERATION} in
install)
	disk_create_mounts
	ostree_create_repo
	create_rootfs_from_container_image
	deploy_ostree_image
	bootloader_create
	;;
upgrade)
	env_verify_local
	create_rootfs_from_container_image
	deploy_ostree_image
	;;
revert)
	env_verify_local
	revert_ostree_image
	;;
*)
	HELP="Usage:
  ostreefy [flavour] [operation]
Operations:
  install : (Install deployment) : Install to a new disk.
  upgrade : (Update deployment) : Creates a new OSTree commit.
  revert  : (Update deployment) : Rolls back version 0."

	printf '%s\n' "$HELP"
	;;
esac
